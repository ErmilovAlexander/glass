import logging
import asyncio
import caldav
from icalendar import Calendar
from datetime import datetime, time, timedelta
import pytz
import locale
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler,MessageHandler,filters
from telegram.helpers import escape_markdown
import json
import os
from faq import get_faq_handler, get_faq_callback_handler, get_faq_menu_handler
from eyelash_secret_easteregg import setup_secret_easteregg

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = "config.json"
if not os.path.exists(CONFIG_FILE):
    raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")

with open(CONFIG_FILE, "r") as file:
    config = json.load(file)
    
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json
TOKEN = config.get("telegram_token")
CALDAV_URL = config.get("caldav_url")
USERNAME = config.get("caldav_username")
PASSWORD = config.get("caldav_password")
PRICE_URL = config.get("price_url")
CALENDAR_NAME = config.get("calendar_name", "Work")
LOG_FILE = config.get("log_file", "bot.log")
USERS_FILE = config.get("users_file", "users.json")
ADMIN_IDS = config.get("admin_ids")
ADMIN_ID = config.get("admin_id")
PHONE = config.get("phone")
OPEN_MONTHS_FILE = config.get("open_months")
BOOKINGS_FILE = config.get("bookings")
PROFILES_FILE = config.get("profiles")
ASK_FIRST_NAME, ASK_LAST_NAME, ASK_PHONE = range(3)
EDIT_USER_ID, EDIT_FIELD_CHOICE, EDIT_FIELD_INPUT = range(3)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        #logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
TZ = pytz.timezone("Europe/Moscow")
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
pending_bookings = {}  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ

from git import Repo
import shutil

import uuid

pending_bookings = {}  # booking_id ‚Üí {user_id, name, date, slot}

def load_profiles():
    if os.path.exists(PROFILES_FILE):
        with open(PROFILES_FILE, "r") as f:
            return json.load(f)
    return {}

def save_profiles(profiles):
    with open(PROFILES_FILE, "w") as f:
        json.dump(profiles, f, indent=4, ensure_ascii=False)


def load_bookings():
    if os.path.exists(BOOKINGS_FILE):
        with open(BOOKINGS_FILE, "r") as f:
            return json.load(f)
    return []

def save_bookings(bookings):
    with open(BOOKINGS_FILE, "w") as f:
        json.dump(bookings, f, indent=4)



def load_open_months():
    if not os.path.exists(OPEN_MONTHS_FILE):
        return []
    with open(OPEN_MONTHS_FILE, "r") as f:
        return json.load(f)

def save_open_months(open_months):
    with open(OPEN_MONTHS_FILE, "w") as f:
        json.dump(open_months, f, indent=4)


def get_closed_months(n=6):
    now = datetime.now(TZ)
    open_months = set(load_open_months())
    closed = []

    for i in range(n):
        dt = (now.replace(day=1) + timedelta(days=32 * i)).replace(day=1)
        key = dt.strftime("%Y-%m")
        if key not in open_months:
            closed.append((key, dt.strftime("%B %Y")))
    return closed

async def admin_edit_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)

    if int(user_id) not in ADMIN_IDS:
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return ConversationHandler.END

    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    profiles = load_profiles()
    keyboard = []

    for uid, profile in profiles.items():
        label = f"{profile.get('first_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {profile.get('last_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({uid})"
        keyboard.append([InlineKeyboardButton(label, callback_data=f"edit_user_{uid}")])

    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_user")])
    await query.edit_message_text("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return EDIT_USER_ID


async def admin_select_user_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "cancel_edit_user":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    user_id = query.data.replace("edit_user_", "")
    context.user_data["edit_user_id"] = user_id

    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–º—è", callback_data="edit_field_first_name")],
        [InlineKeyboardButton("‚úèÔ∏è –§–∞–º–∏–ª–∏—è", callback_data="edit_field_last_name")],
        [InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_field_phone")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_user")],
    ]
    await query.edit_message_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return EDIT_FIELD_CHOICE


async def admin_input_user_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action = query.data.replace("edit_field_", "")
    context.user_data["edit_field"] = action

    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {action}")
    return EDIT_FIELD_INPUT


async def admin_save_user_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    user_id = context.user_data.get("edit_user_id")
    field = context.user_data.get("edit_field")

    if not user_id or not field:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–æ–ª–µ.")
        return ConversationHandler.END

    profiles = load_profiles()
    if user_id not in profiles:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    profiles[user_id][field] = user_input
    save_profiles(profiles)
    logger.info(f"[Admin] –û–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–æ—Ñ–∏–ª—å {user_id}: {field} = {user_input}")
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
    return ConversationHandler.END

async def user_cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    booking_id = query.data.replace("user_cancel_", "")
    bookings = load_bookings()

    for b in bookings:
        if b["id"] == booking_id and b["user_id"] == user_id:
            if b["status"] in ("pending", "confirmed"):
                b["status"] = "cancelled"
                save_bookings(bookings)

                # –£–¥–∞–ª—è–µ–º –∏–∑ pending, –µ—Å–ª–∏ –µ—Å—Ç—å
                if booking_id in pending_bookings:
                    del pending_bookings[booking_id]

                await query.edit_message_text("‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{b['name']}* –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å:\nüìÖ {b['date']} –≤ {b['slot']}",
                    parse_mode="Markdown"
                )
                return

    await query.edit_message_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å.")

async def admin_free_slots_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    logger.info(f"[Admin] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –º–µ—Å—è—Ü")

    now = datetime.now(TZ)
    cal = IrCalendar()
    messages = []

    for day in range(1, 32):
        try:
            selected_date = datetime(now.year, now.month, day).date()
            logger.debug(f"[Slots] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è: {selected_date}")
            free_slots = await cal.find_free_slots_async(selected_date)
            logger.debug(f"[Slots] –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ {selected_date}: {len(free_slots)}")

            if free_slots:
                formatted_slots = ", ".join(slot.strftime("%H:%M") for slot in free_slots)
                messages.append(f"{selected_date.strftime('%d.%m')}: {formatted_slots}")
        except ValueError as ve:
            logger.warning(f"[Slots] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {day}/{now.month}/{now.year}")
            continue
        except Exception as e:
            logger.exception(f"[Slots] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {day}/{now.month}/{now.year}: {e}")
            continue

    if not messages:
        text = "‚ùå –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω."
        logger.info("[Slots] –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ—à–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ.")
    else:
        text = "*–°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–æ—à–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:*\n\n" + "\n".join(messages)
        logger.info("[Slots] –°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–æ—à–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã.")

    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=get_main_menu(user_id))

async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "admin_open_month":
        await open_month_command(update, context)
    elif data == "admin_subscribers":
        await subscribers_count(update, context)


async def admin_month_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    now = datetime.now(TZ)
    month_start = datetime(now.year, now.month, 1).date()
    month_end = (month_start + timedelta(days=32)).replace(day=1) - timedelta(days=1)

    bookings = load_bookings()
    profiles = load_profiles()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ –º–µ—Å—è—Ü—É
    month_bookings = [b for b in bookings if b["status"] == "confirmed"]

    response = f"üìÖ *–ó–∞—è–≤–∫–∏ –∑–∞ {month_start.strftime('%B %Y')}*\n\n"
    if not month_bookings:
        response += "‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
    else:
        for b in month_bookings:
            user_id = str(b["user_id"])
            profile = profiles.get(user_id, {})
            response += (
                f"üë§ {profile.get('first_name', '‚Äì')} {profile.get('last_name', '‚Äì')}\n"
                f"üì± {profile.get('phone', '‚Äì')}\n"
                f"üìÖ {b['date']} –≤ {b['slot']}\n"
                f"{'-' * 30}\n"
            )

    await query.edit_message_text(response, parse_mode="Markdown", reply_markup=get_main_menu(int(query.from_user.id)))

async def show_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    profiles = load_profiles()
    profile = profiles.get(user_id)

    if not profile:
        await query.edit_message_text("üìù –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏.")
        return

    history = profile.get("history", [])
    history_text = "\n".join(history) if history else "‚Äî"

    text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
        f"–ò–º—è: {profile['first_name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {profile['last_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile['phone']}\n"
        f"üóì –ò—Å—Ç–æ—Ä–∏—è:\n{history_text}"
    )

    buttons = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_first_name")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é", callback_data="edit_last_name")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="calendar_open")]
    ]

    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(buttons))



async def ask_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    first_name = update.message.text.strip()
    logger.debug(f"[Profile] Received first_name: {first_name} (user_id={update.message.from_user.id})")
    context.user_data["first_name"] = first_name

    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *—Ñ–∞–º–∏–ª–∏—é*:")
    return ASK_LAST_NAME

async def ask_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_name = update.message.text.strip()
    logger.debug(f"[Profile] Received last_name: {last_name} (user_id={update.message.from_user.id})")
    context.user_data["last_name"] = last_name

    await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +79001234567):")
    return ASK_PHONE

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    user_id = str(update.message.from_user.id)

    logger.debug(f"[Profile] Received phone: {phone} (user_id={user_id})")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not phone.startswith("+7") or not phone[1:].isdigit() or len(phone) != 12:
        logger.warning(f"[Profile] Invalid phone format: {phone}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79001234567:")
        return ASK_PHONE

    try:
        profiles = load_profiles()
        profiles[user_id] = {
            "first_name": context.user_data.get("first_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "last_name": context.user_data.get("last_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "phone": phone or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "history": []
        }
        # –î–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å
        booking_id = context.user_data.get("confirm_booking_id")
        bookings = load_bookings()
        slot_info = None
        for b in bookings:
            if b["id"] == booking_id:
                slot_info = f"{b['date']} {b['slot']}"
                break

        if slot_info:
            profiles[user_id]["history"].append(slot_info)

        save_profiles(profiles)
        logger.info(f"[Profile] –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è user_id={user_id}: {profiles[user_id]}")

        await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=get_main_menu(user_id))
        return ConversationHandler.END

    except Exception as e:
        logger.exception(f"[Profile] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def show_user_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    bookings = load_bookings()
    my = [b for b in bookings if b["user_id"] == user_id and b["status"] in ("pending", "confirmed")]

    if not my:
        await query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=get_main_menu(user_id))
        return

    for b in my:
        text = f"üìÖ *{b['date']}* ‚Äî üïí {b['slot']}\n–°—Ç–∞—Ç—É—Å: `{b['status']}`"
        buttons = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"user_cancel_{b['id']}")]]
        await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(buttons))

    await context.bot.send_message(chat_id=user_id, text="‚¨áÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu(user_id))

async def admin_open_month_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if user_id not in ADMIN_IDS:
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    key = query.data.replace("admin_open_", "")
    open_months = load_open_months()

    if key not in open_months:
        open_months.append(key)
        save_open_months(open_months)
        await query.edit_message_text(f"‚úÖ –ú–µ—Å—è—Ü *{key}* –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.", parse_mode="Markdown")
    else:
        await query.edit_message_text(f"‚ÑπÔ∏è –ú–µ—Å—è—Ü *{key}* —É–∂–µ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç.", parse_mode="Markdown")

async def open_month_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id

    if user_id not in ADMIN_IDS:
        await update.effective_message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    closed_months = get_closed_months()
    if not closed_months:
        await update.effective_message.reply_text("‚úÖ –í—Å–µ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã.")
        return

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"admin_open_{key}")]
        for key, name in closed_months
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.effective_message.reply_text("üîì –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:", reply_markup=reply_markup)


def upload_price_to_github():
    repo_url = config.get("github_repo_url")
    branch = config.get("github_branch", "main")
    local_path = config.get("github_local_path", "repo_clone")
    remote_dir = config.get("github_remote_dir", ".")

    if not all([repo_url, branch, local_path, remote_dir]):
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã GitHub –≤ config.json")
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–æ–Ω (–µ—Å–ª–∏ –±—ã–ª)
    if os.path.exists(local_path):
        shutil.rmtree(local_path)

    try:
        logger.info("üì¶ –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub...")
        repo = Repo.clone_from(repo_url, local_path, branch=branch)

        # –ö–æ–ø–∏—Ä—É–µ–º price.html
        dst_path = os.path.join(local_path, remote_dir)
        os.makedirs(dst_path, exist_ok=True)
        shutil.copy("price.html", os.path.join(dst_path, "price.html"))

        # Git: add, commit, push
        repo.git.add(A=True)
        repo.index.commit("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å–∞ –∏–∑ Telegram-–±–æ—Ç–∞")
        repo.remote().push()
        logger.info("‚úÖ price.html —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ GitHub!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –≤ GitHub: {e}")
        
class IrCalendar:
    def __init__(self):
        self.caldav_url = CALDAV_URL
        self.username = USERNAME
        self.password = PASSWORD
        logger.info("IrCalendar initialized with CalDAV URL: %s", self.caldav_url)

    def parse_datetime(self, dt_obj):
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ timezone-aware."""
        logger.debug("Parsing datetime: %s", dt_obj)
        if isinstance(dt_obj, datetime):
            return dt_obj if dt_obj.tzinfo else TZ.localize(dt_obj)
        return None

    def get_busy_slots_sync(self, selected_date):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ CalDAV."""
        logger.info("Getting busy slots for date: %s", selected_date)
        try:
            client = caldav.DAVClient(url=self.caldav_url, username=self.username, password=self.password)
            my_principal = client.principal()
            calendars = my_principal.calendars()

            if not calendars:
                logger.warning("No calendars found.")
                return []

            for c in calendars:
                if c.name == CALENDAR_NAME:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'Work'
                    calendar = client.calendar(url=c.url)
                    events = calendar.date_search(selected_date)

                    busy_slots = []
                    for event in events:
                        gcal = Calendar.from_ical(event.data)
                        for component in gcal.walk():
                            if component.name == "VEVENT":
                                dtstart = self.parse_datetime(component.get('dtstart').dt)
                                dtend = self.parse_datetime(component.get('dtend').dt)
                                if dtstart and dtend:
                                    busy_slots.append((dtstart, dtend))
                    logger.info("Found busy slots: %s", busy_slots)
                    return busy_slots
        except Exception as e:
            logger.error("Error while getting calendar events: %s", e)
            return []

    async def get_busy_slots(self, selected_date):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥."""
        logger.debug("Asynchronously getting busy slots for date: %s", selected_date)
        loop = asyncio.get_event_loop()
        busy_slots = await loop.run_in_executor(None, self.get_busy_slots_sync, selected_date)
        return busy_slots

    async def find_free_slots_async(self, selected_date):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —à–∞–≥–æ–º 3 —á–∞—Å–∞."""
        logger.info("Finding free slots for date: %s", selected_date)
        work_start_dt = TZ.localize(datetime.combine(selected_date, time(10, 0)))
        work_end_dt = TZ.localize(datetime.combine(selected_date, time(22, 0)))

        busy_slots = await self.get_busy_slots(selected_date)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        free_slots = []

        current_start = work_start_dt
        while current_start < work_end_dt:
            current_end = current_start + timedelta(hours=3)
            is_busy = any(start < current_end and end > current_start for start, end in busy_slots)

            if not is_busy:
                free_slots.append(current_start)

            current_start = current_end

        logger.info("Found free slots: %s", free_slots)
        return free_slots

    async def update_calendar_status(self, year, month):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –ø–æ–º–µ—á–∞—è –¥–Ω–∏ –∫–∞–∫ ‚úÖ –∏–ª–∏ ‚õî."""
        logger.info("Updating calendar status for year: %d, month: %d", year, month)
        days_status = {}

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≤ –º–µ—Å—è—Ü–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        for day in range(1, 32):
            try:
                selected_date = datetime(year, month, day).date()
                free_slots = await self.find_free_slots_async(selected_date)

                if free_slots:
                    days_status[day] = "‚úÖ"  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
                else:
                    days_status[day] = "‚õî"  # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã

                logger.debug("Day %d status: %s", day, days_status[day])
            except ValueError:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Å–µ–Ω—Ç—è–±—Ä—è), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.warning("Invalid date: %d/%d/%d", day, month, year)
                continue

        logger.info("Updated calendar status: %s", days_status)
        return days_status


def generate_calendar(year, month, days_status, mode="auto"):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü, –∞–¥–∞–ø—Ç–∏—Ä—É—è –ø–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä.
    mode = "phone" ‚Üí 7 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ (–Ω–µ–¥–µ–ª—è).
    mode = "desktop" ‚Üí 10 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ.
    mode = "auto" ‚Üí –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
    """
    logger.debug("Generating calendar for year: %d, month: %d, mode: %s", year, month, mode)
    open_months = load_open_months()
    key = f"{year}-{month:02d}"
    if key not in open_months:
        logger.info("–ú–µ—Å—è—Ü %s-%s –Ω–µ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.", year, month)
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚õî –ú–µ—Å—è—Ü –∑–∞–∫—Ä—ã—Ç", callback_data="none")]])

    first_day = datetime(year, month, 1)
    last_day = (first_day + timedelta(days=32)).replace(day=1) - timedelta(days=1)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–ø–µ—Ä–≤—ã–π –¥–µ–Ω—å - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
    if mode == "auto":
        mode = "phone"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω

    max_buttons_per_row = 7 if mode == "phone" else 10  # 7 –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞, 10 –¥–ª—è –ü–ö

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    days_buttons = [[InlineKeyboardButton(day, callback_data="none") for day in week_days]]

    row = []
    start_weekday = first_day.weekday()  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–µ—Å—è—Ü

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º
    for _ in range(start_weekday):
        row.append(InlineKeyboardButton(" ", callback_data="none"))

    today = datetime.now(TZ).date()
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–Ω—è–º–∏ —Å –Ω–æ–≤—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    for day in range(1, last_day.day + 1):
        current_date = datetime(year, month, day).date()
        status = days_status.get(day, "‚ùì")

        # –ò–∑–º–µ–Ω—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–π
        if current_date < today:
            day_text = f"{day}"
            callback_data = "none"
        elif status == "‚úÖ":
            day_text = f"{day}"
            callback_data = f"day_{year}_{month}_{day}"
        elif status == "‚õî":
            day_text = "‚ùå"
            callback_data = "none"
        else:
            day_text = f"{day}"
            callback_data = "none"
        row.append(InlineKeyboardButton(day_text, callback_data=callback_data))

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ 7 –∫–Ω–æ–ø–æ–∫ (–Ω–µ–¥–µ–ª—è)
        if len(row) == max_buttons_per_row:
            days_buttons.append(row)
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if row:
        while len(row) < max_buttons_per_row:
            row.append(InlineKeyboardButton(" ", callback_data="none"))
        days_buttons.append(row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–≤–ª–µ–≤–æ, –º–µ—Å—è—Ü, –≤–ø—Ä–∞–≤–æ)
    navigation_buttons = [
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_month_{year}_{month}"),
        InlineKeyboardButton(first_day.strftime("%B %Y"), callback_data="none"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_month_{year}_{month}")
    ]

    days_buttons.append(navigation_buttons)

    logger.debug("Generated calendar buttons: %s", days_buttons)
    return InlineKeyboardMarkup(days_buttons)


def get_main_menu(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="calendar_open")],
        #[InlineKeyboardButton("üíµ –ü—Ä–∞–π—Å", callback_data="price_button")],
        [InlineKeyboardButton("üìÑ –ü—Ä–∞–π—Å", callback_data="price_html")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_button")],
        [InlineKeyboardButton("üßë‚Äçüéì FAQ", callback_data="faq_menu")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="user_bookings")],  # üëà –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("üìñ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")]
    ]
    if user_id in ADMIN_IDS:
        keyboard.append(
            [InlineKeyboardButton("üìÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data="admin_month_bookings")]
        )
        keyboard.append(
            [InlineKeyboardButton("üïí –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã", callback_data="admin_free_slots_month")]
        )
        keyboard.append([
            InlineKeyboardButton("üîì –û—Ç–∫—Ä—ã—Ç—å –º–µ—Å—è—Ü", callback_data="admin_open_month")
        ])
        keyboard.append([
            InlineKeyboardButton("üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="admin_subscribers")
        ])
        keyboard.append([
            InlineKeyboardButton("üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="admin_edit_profile")
        ])
    return InlineKeyboardMarkup(keyboard)

  
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    user = update.message.from_user
    user_id = user.id
    user_name = user.full_name
    username = user.username if user.username else "–ù–µ—Ç"
    date_subscribed = datetime.now().strftime("%Y-%m-%d %H:%M")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if not any(sub["id"] == user_id for sub in subscribers):
        subscribers.append({
            "id": user_id,
            "name": user_name,
            "username": username,
            "date_subscribed": date_subscribed
        })
        save_users(subscribers)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_name} (@{username}, {user_id})")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    logger.info("Start command received.")
    cal = IrCalendar()
    now = datetime.now(TZ)

    days_status = {day: "‚ùì" for day in range(1, 32)}
    reply_markup = generate_calendar(now.year, now.month, days_status)

    combined_keyboard = get_main_menu(user_id).inline_keyboard + reply_markup.inline_keyboard
    full_reply_markup = InlineKeyboardMarkup(combined_keyboard)

    message = await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)

    asyncio.create_task(update_calendar_after_sync(message, now.year, now.month, cal))

async def subscribers_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id

    if user_id not in ADMIN_IDS:
        await update.effective_message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    count = len(subscribers)
    message = f"üìä *–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}*\n\n"

    if count == 0:
        message += "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."
    else:
        for sub in subscribers:
            name = escape_markdown(sub['name'], version=2)
            user_id = sub['id']
            date_subscribed = escape_markdown(sub['date_subscribed'], version=2)
            username = escape_markdown(sub['username'], version=2) if sub['username'] else "–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
            username_display = f"üîó @{username}" if sub['username'] else "üîó –ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"

            message += (
                f"üë§ *{name}*\n"
                f"\\(ID: `{user_id}`\\)\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è: {date_subscribed}\n"
                f"{username_display}\n"
                f"{'\\-' * 30}\n"
            )
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="calendar_open")],
        [InlineKeyboardButton("üíµ –ü—Ä–∞–π—Å", callback_data="price_button")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_button")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.effective_message.reply_text(message, parse_mode="MarkdownV2", reply_markup=get_main_menu(user_id))


async def update_calendar_after_sync(message, year, month, cal, user_id=None):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Yandex –ö–∞–ª–µ–Ω–¥–∞—Ä–µ–º."""

    loading_message = await message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    key = f"{year}-{month:02d}"
    if key not in load_open_months():
        await message.edit_text("‚õî *–≠—Ç–æ—Ç –º–µ—Å—è—Ü –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏*", parse_mode="Markdown")
        return

    days_status = await cal.update_calendar_status(year, month)
    reply_markup = generate_calendar(year, month, days_status)

    combined_keyboard = get_main_menu(message.chat_id).inline_keyboard + reply_markup.inline_keyboard
    full_reply_markup = InlineKeyboardMarkup(combined_keyboard)

    await message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)
    await loading_message.delete()
    

async def change_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Change month callback received.")
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    try:
        parts = query.data.split("_")
        if len(parts) != 4:
            return

        direction, _, year, month = parts
        year, month = int(year), int(month)
        key = f"{year}-{month:02d}"
        if key not in load_open_months():
            await query.edit_message_text("‚õî *–≠—Ç–æ—Ç –º–µ—Å—è—Ü –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏*", parse_mode="Markdown")
            return

        if direction == "prev":
            month -= 1
            if month == 0:
                year -= 1
                month = 12
        elif direction == "next":
            month += 1
            if month == 13:
                year += 1
                month = 1

        cal = IrCalendar()
        days_status = {day: "‚ùì" for day in range(1, 32)}
        reply_markup = generate_calendar(year, month, days_status)
        message = await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)

        asyncio.create_task(update_calendar_after_sync(message, year, month, cal, user_id))

    except Exception as e:
        logger.error("Error while processing callback data: %s", e)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")

async def day_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    logger.info("Day selected callback received.")
    query = update.callback_query
    await query.answer()

    _, year, month, day = query.data.split("_")
    selected_date = datetime(int(year), int(month), int(day)).date()

    cal = IrCalendar()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç IrCalendar
    free_slots = await cal.find_free_slots_async(selected_date)

    if not free_slots:
        message = f"‚õî –ù–∞ {selected_date.strftime('%d %b')} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calendar_back_{year}_{month}")]]
    else:
        message = f"‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞ –Ω–∞ {selected_date.strftime('%d %b')}:\n"
        keyboard = []

        for slot in free_slots:
            slot_text = slot.strftime('%H:%M')
            message += f"üïí {slot_text}\n"
            keyboard.append([InlineKeyboardButton(f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è {slot_text}", callback_data=f"book_{year}_{month}_{day}_{slot_text}")])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calendar_back_{year}_{month}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)



async def calendar_open(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Calendar button pressed.")
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    now = datetime.now(TZ)
    cal = IrCalendar()

    days_status = {day: "‚ùì" for day in range(1, 32)}
    reply_markup = generate_calendar(now.year, now.month, days_status)

    combined_keyboard = get_main_menu(user_id).inline_keyboard + reply_markup.inline_keyboard
    full_reply_markup = InlineKeyboardMarkup(combined_keyboard)

    try:
        if query.message.text:
            await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)
        else:
            await query.message.delete()
            await query.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ calendar_open: {e}")
        await query.message.delete()
        await query.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)

    key = f"{now.year}-{now.month:02d}"
    if key in load_open_months():
        asyncio.create_task(update_calendar_after_sync(query.message, now.year, now.month, cal, user_id))
    else:
        await query.message.edit_text("‚õî *–≠—Ç–æ—Ç –º–µ—Å—è—Ü –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏*", parse_mode="Markdown")

async def calendar_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Back to calendar callback received.")
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    now = datetime.now(TZ)
    cal = IrCalendar()

    days_status = {day: "‚ùì" for day in range(1, 32)}
    reply_markup = generate_calendar(now.year, now.month, days_status)
    message = await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)

    key = f"{now.year}-{now.month:02d}"
    if key in load_open_months():
        asyncio.create_task(update_calendar_after_sync(message, now.year, now.month, cal, user_id))
    else:
        await message.edit_text("‚õî *–≠—Ç–æ—Ç –º–µ—Å—è—Ü –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏*", parse_mode="Markdown")


async def price_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–∞–π—Å."""
    logger.info("Price button pressed.")
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    try:
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    with open('price.jpg', 'rb') as photo:
        await query.message.reply_photo(photo, caption="üíµ –í–æ—Ç –Ω–∞—à –ø—Ä–∞–π—Å:", reply_markup=get_main_menu())


async def contacts_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã."""
    logger.info("Contacts button pressed.")
    query = update.callback_query
    await query.answer()

    phone_number = PHONE
    await query.message.reply_text(f"üìû –ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}", reply_markup=get_main_menu(int(query.from_user.id)))


def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as file:
        return json.load(file)

def save_users(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª."""
    with open(USERS_FILE, "w") as file:
        json.dump(users, file, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
subscribers = load_users()



async def book_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø–∏—Å—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç."""
    logger.info("Booking slot...")
    query = update.callback_query
    await query.answer()

    _, year, month, day, time = query.data.split("_")
    selected_date = f"{day}.{month}.{year} –≤ {time}"

    admin_id = "5328759519"
    message_admin = f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å: {selected_date}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await context.bot.send_message(chat_id=admin_id, text=message_admin)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {selected_date}!")


async def book_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, year, month, day, slot = query.data.split("_")
    selected_date = datetime(int(year), int(month), int(day)).strftime('%d.%m.%Y')

    user = query.from_user
    user_id = user.id
    user_name = user.full_name

    booking_id = str(uuid.uuid4())
    booking_data = {
        "id": booking_id,
        "user_id": user_id,
        "name": user_name,
        "date": selected_date,
        "slot": slot,
        "status": "pending"
    }

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
    profiles = load_profiles()
    user_key = str(user_id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
    if user_key not in profiles:
        logger.info(f"[Booking] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é")
        context.user_data["confirm_booking_id"] = booking_id
        pending_bookings[booking_id] = {
            "user_id": user_id,
            "name": user_name,
            "date": selected_date,
            "slot": slot
        }

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        bookings = load_bookings()
        bookings.append(booking_data)
        save_bookings(bookings)

        # –ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã
        await query.edit_message_text("üìã –î–ª—è –∑–∞–ø–∏—Å–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:")

        # ‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        async def remind_if_no_profile():
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            profiles_check = load_profiles()
            if user_key not in profiles_check and context.user_data.get("confirm_booking_id") == booking_id:
                logger.info(f"[Booking] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ")
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚è∞ –í—ã –Ω–∞—á–∞–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ {selected_date} –≤ {slot}, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∞–Ω–∫–µ—Ç—É.\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìã –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="calendar_open")]
                    ])
                )

        asyncio.create_task(remind_if_no_profile())
        return ASK_FIRST_NAME

    # ‚úÖ –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    logger.info(f"[Booking] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –∞–Ω–∫–µ—Ç—ã ‚Äî –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –µ—Å—Ç—å")

    pending_bookings[booking_id] = {
        "user_id": user_id,
        "name": user_name,
        "date": selected_date,
        "slot": slot
    }

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º
    bookings = load_bookings()
    bookings.append(booking_data)
    save_bookings(bookings)

    # üîî –ê–¥–º–∏–Ω—É
    buttons = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{booking_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{booking_id}")
        ]
    ]
    text = (
        f"üì¨ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n"
        f"üë§ [{user_name}](tg://user?id={user_id})\n"
        f"üìÖ *–î–∞—Ç–∞:* {selected_date}\n"
        f"üïí *–í—Ä–µ–º—è:* {slot}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(buttons))

    # üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text(f"üïí –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


async def handle_admin_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, booking_id = query.data.split("_", 1)
    booking = pending_bookings.get(booking_id)

    if not booking:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id = booking["user_id"]
    user_name = booking["name"]
    slot_info = f"{booking['date']} –≤ {booking['slot']}"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    bookings = load_bookings()
    for b in bookings:
        if b["id"] == booking_id:
            b["status"] = "confirmed" if action == "confirm" else "rejected"
            break
    save_bookings(bookings)

    # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    del pending_bookings[booking_id]

    if action == "reject":
        await context.bot.send_message(user_id, f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ *{slot_info}* –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", parse_mode="Markdown")
        await query.edit_message_text(f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ {slot_info} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        return

    # üìå –í—Å–µ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø–∏—Å–∏
    await context.bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ *{slot_info}* –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", parse_mode="Markdown")
    await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ {slot_info} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    # üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profiles = load_profiles()
    user_key = str(user_id)
    if user_key not in profiles:
        context.user_data["confirm_booking_id"] = booking_id  # üëà –í–û–¢ –ó–î–ï–°–¨
        await context.bot.send_message(
            user_id,
            "üìã –ß—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:"
        )
        return ASK_FIRST_NAME  # üëà –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É
    else:
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å)
        history = profiles[user_key].get("history", [])
        history.append(slot_info)
        profiles[user_key]["history"] = history
        save_profiles(profiles)

async def show_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    bookings = load_bookings()
    if not bookings:
        await update.message.reply_text("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: ?status=confirmed/pending/etc
    lines = ["üìã *–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:*", ""]
    for b in bookings[-20:][::-1]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20, —Å–≤–µ—Ä—Ö—É ‚Äî –Ω–æ–≤—ã–µ
        lines.append(
            f"üë§ *{b['name']}*\n"
            f"üìÖ {b['date']} ‚Äî üïí {b['slot']}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: `{b['status']}`\n"
            f"{'‚îÄ' * 25}"
        )

    await update.message.reply_text("\n".join(lines), parse_mode="Markdown")



async def send_price_html(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ HTML-–ø—Ä–∞–π—Å –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ Telegram."""
    price_url = PRICE_URL  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à URL

    message_text = f"üí∞ *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç*\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∞–π—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ]({price_url})\n\n"

    keyboard = [
        [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∞–π—Å", url=price_url)],
        [InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="calendar_open"),
         InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_button")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(message_text, parse_mode="Markdown", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(message_text, parse_mode="Markdown", reply_markup=reply_markup)


async def send_price_html2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-—Ñ–∞–π–ª –ø—Ä–∞–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    logger.info("Sending price.html to user.")

    # **1. –°–æ–∑–¥–∞–µ–º HTML-—Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç**
    file_path = "price.html"
    if not os.path.exists(file_path):
        html_content = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@500&display=swap');
        body { font-family: 'Dancing Script', cursive; text-align: center; background-color: #f9f9f9; font-size: 18px; }
        h1 { color: #333; font-size: 28px; }
        h2 { color: #444; margin-top: 30px; font-size: 24px; }
        table { width: 80%; margin: 20px auto; border-collapse: collapse; background: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); border-radius: 8px; overflow: hidden; }
        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        th { background-color: #e91e63; color: white; font-size: 16px; }
        td { font-size: 18px; }
        .footer { margin-top: 30px; font-size: 20px; }
        .footer a { text-decoration: none; color: #e91e63; font-weight: bold; }
    </style>
</head>
<body>
    <h1>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç</h1>
    <p>–ê–∫—Ç—É–∞–ª—å–Ω–æ —Å 01.07.2024</p>
    <h2>–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü</h2>
    <table><tr><th>–£—Å–ª—É–≥–∞</th><th>–¶–µ–Ω–∞ (‚ÇΩ)</th></tr>
        <tr><td>–£–≥–æ–ª–∫–∏</td><td>2200</td></tr><tr><td>1D</td><td>2500</td></tr>
        <tr><td>1.5D</td><td>2700</td></tr><tr><td>2D</td><td>2800</td></tr>
        <tr><td>2.5D</td><td>3000</td></tr><tr><td>3D</td><td>3100</td></tr>
        <tr><td>4D</td><td>3400</td></tr><tr><td>–¶–≤–µ—Ç–Ω—ã–µ —Ä–µ—Å–Ω–∏—Ü—ã, –±–ª–µ—Å—Ç–∫–∏, –ª—É—á–∏–∫–∏</td><td>+300</td></tr>
    </table>
    <h2>–°–Ω—è—Ç–∏–µ</h2>
    <table><tr><th>–£—Å–ª—É–≥–∞</th><th>–¶–µ–Ω–∞ (‚ÇΩ)</th></tr>
        <tr><td>–ú–æ–µ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ–º</td><td>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</td></tr>
        <tr><td>–ú–æ–µ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è</td><td>300</td></tr>
        <tr><td>–†–∞–±–æ—Ç—ã –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞</td><td>300</td></tr>
    </table>
    <div class="footer"><a href="https://t.me/LashesButovo_bot">üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç–∞</a></div>
</body>
</html>"""
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(html_content)

    # **2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å**
    if update.message:
        # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /price_html
        chat_id = update.message.chat_id
        send_method = update.message.reply_document
    elif update.callback_query:
        # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        chat_id = update.callback_query.message.chat_id
        send_method = update.callback_query.message.reply_document
        await update.callback_query.answer()

    # **3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**
    with open(file_path, "rb") as file:
        await send_method(file, caption="üìÑ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç.", reply_markup=get_main_menu())

EDIT_PRICE, EDIT_ITEM, EDIT_FIELD = range(3)
price_items = []  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª—É–≥

def parse_html_price():
    """–ü–∞—Ä—Å–∏—Ç HTML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [(—Ä–∞–∑–¥–µ–ª, —É—Å–ª—É–≥–∞, —Ü–µ–Ω–∞)]"""
    from bs4 import BeautifulSoup
    with open("price.html", "r", encoding="utf-8") as f:
        soup = BeautifulSoup(f, "html.parser")

    result = []
    current_section = None
    for tag in soup.find_all(["h2", "tr"]):
        if tag.name == "h2":
            current_section = tag.text.strip()
        elif tag.name == "tr":
            cols = tag.find_all("td")
            if len(cols) == 2:
                result.append((current_section, cols[0].text.strip(), cols[1].text.strip()))
    return result


async def edit_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return ConversationHandler.END

    global price_items
    price_items = parse_html_price()

    keyboard = [
        [InlineKeyboardButton(f"{name} ‚Äî {price}", callback_data=f"edit_{i}")]
        for i, (_, name, price) in enumerate(price_items)
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")])
    keyboard.append([InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="calendar_open")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("üõ† –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
    return EDIT_ITEM

async def edit_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_edit":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    index = int(query.data.split("_")[1])
    context.user_data["edit_index"] = index
    section, name, price = price_items[index]

    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_price")],
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_edit")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ]
    text = f"üîß –í—ã –≤—ã–±—Ä–∞–ª–∏: *{name}* ‚Äî *{price}* (–≤ —Ä–∞–∑–¥–µ–ª–µ _{section}_)"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return EDIT_FIELD

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "edit_name":
        context.user_data["edit_field"] = "name"
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return EDIT_FIELD

    elif action == "edit_price":
        context.user_data["edit_field"] = "price"
        await query.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
        return EDIT_FIELD

    elif action == "save_edit":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
        update_price_html()
        upload_price_to_github()  # üëà –î–û–ë–ê–í–¨ –≠–¢–û
        # –ó–∞–Ω–æ–≤–æ –∑–∞–≥—Ä—É–∂–∞–µ–º price_items
        global price_items
        price_items = parse_html_price()

        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton(f"{name} ‚Äî {price}", callback_data=f"edit_{i}")]
            for i, (_, name, price) in enumerate(price_items)
        ]
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")])

        await query.edit_message_text(
            "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDIT_ITEM

    elif action == "cancel_edit":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END



async def receive_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data.get("edit_index")
    field = context.user_data.get("edit_field")
    new_value = update.message.text.strip()

    if field == "name":
        price_items[index] = (price_items[index][0], new_value, price_items[index][2])
    elif field == "price":
        price_items[index] = (price_items[index][0], price_items[index][1], new_value)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–Ω–æ–ø–∫–∏
    section, name, price = price_items[index]
    text = f"üîß –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ: *{name}* ‚Äî *{price}* (–≤ —Ä–∞–∑–¥–µ–ª–µ _{section}_)"

    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_price")],
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_edit")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return EDIT_FIELD


def update_price_html():
    from bs4 import BeautifulSoup
    with open("price.html", "r", encoding="utf-8") as f:
        soup = BeautifulSoup(f, "html.parser")

    tables = soup.find_all("table")
    index = 0

    for table in tables:
        for tr in table.find_all("tr")[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            section, name, price = price_items[index]
            tds = tr.find_all("td")
            if len(tds) == 2:
                tds[0].string = name
                tds[1].string = price
            index += 1

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π —Ñ–∞–π–ª
    import shutil
    shutil.copy("price.html", f"price_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html")

    with open("price.html", "w", encoding="utf-8") as f:
        f.write(str(soup))
    #new_filename = f"price_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.html"
    #with open(new_filename, "w", encoding="utf-8") as f:
    #    f.write(str(soup))


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("Bot started.")
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(change_month, pattern=r"^(prev|next)_month_"))
    application.add_handler(CallbackQueryHandler(day_selected, pattern=r"^day_\d+_\d+_\d+"))
    application.add_handler(CallbackQueryHandler(calendar_open, pattern="calendar_open"))
    application.add_handler(CallbackQueryHandler(calendar_back, pattern=r"^calendar_back_\d+_\d+$"))

    setup_secret_easteregg(application)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(price_button, pattern="price_button"))
    application.add_handler(CallbackQueryHandler(contacts_button, pattern="contacts_button"))
    application.add_handler(CallbackQueryHandler(book_appointment, pattern=r"^book_\d+_\d+_\d+_\d+:\d+$"))
    application.add_handler(CallbackQueryHandler(book_slot, pattern=r"^book_\d+_\d+_\d+_\d+:\d+$"))
    application.add_handler(CommandHandler("subscribers", subscribers_count))
    application.add_handler(CommandHandler("price_html", send_price_html))
    application.add_handler(CallbackQueryHandler(send_price_html, pattern="price_html"))
    application.add_handler(get_faq_handler())
    application.add_handler(get_faq_callback_handler())
    application.add_handler(get_faq_menu_handler())
    application.add_handler(CommandHandler("open_month", open_month_command))
    application.add_handler(CallbackQueryHandler(admin_open_month_button, pattern=r"^admin_open_\d{4}-\d{2}$"))
    application.add_handler(CommandHandler("bookings", show_bookings))
    application.add_handler(CallbackQueryHandler(show_user_bookings, pattern="user_bookings"))
    application.add_handler(CallbackQueryHandler(user_cancel_booking, pattern=r"^user_cancel_[\w-]+$"))
    application.add_handler(CallbackQueryHandler(show_user_profile, pattern="user_profile"))
    application.add_handler(CallbackQueryHandler(admin_month_bookings, pattern="admin_month_bookings"))
    application.add_handler(CallbackQueryHandler(admin_free_slots_month, pattern="admin_free_slots_month"))
    application.add_handler(CallbackQueryHandler(handle_admin_buttons, pattern=r"^admin_(open_month|subscribers)$"))

    admin_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_admin_response, pattern=r"^(confirm|reject)_[\w-]+$")
        ],
        states={
            ASK_FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_first_name)],
            ASK_LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_last_name)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
        },
        fallbacks=[]
    )
    application.add_handler(admin_conv)

    admin_profile_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(admin_edit_user_profile, pattern="^admin_edit_profile$")
        ],
        states={
            EDIT_USER_ID: [CallbackQueryHandler(admin_select_user_field, pattern="^edit_user_\\d+$|^cancel_edit_user$")],
            EDIT_FIELD_CHOICE: [CallbackQueryHandler(admin_input_user_field, pattern="^edit_field_\\w+$")],
            EDIT_FIELD_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_save_user_field)]
        },
        fallbacks=[]
    )
    application.add_handler(admin_profile_conv)

    edit_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("edit_price", edit_price)],
            states={
                EDIT_ITEM: [CallbackQueryHandler(edit_item, pattern=r"^edit_\d+$|^cancel_edit$")],
                EDIT_FIELD: [
                    CallbackQueryHandler(edit_field, pattern=r"^edit_name$|^edit_price$|^save_edit$|^cancel_edit$"),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, receive_input)
                ]
            },
            fallbacks=[]
        )


    application.add_handler(edit_conv_handler)

    application.run_polling()


if __name__ == "__main__":
    main()

