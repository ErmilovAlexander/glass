import logging
import asyncio
import caldav
from icalendar import Calendar
from datetime import datetime, time, timedelta
import pytz
import locale
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import json
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = "config.json"
if not os.path.exists(CONFIG_FILE):
    raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")

with open(CONFIG_FILE, "r") as file:
    config = json.load(file)
    
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json
TOKEN = config.get("telegram_token")
CALDAV_URL = config.get("caldav_url")
USERNAME = config.get("caldav_username")
PASSWORD = config.get("caldav_password")
PRICE_URL = config.get("price_url")
CALENDAR_NAME = config.get("calendar_name", "Work")
LOG_FILE = config.get("log_file", "bot.log")
USERS_FILE = config.get("users_file", "users.json")
ADMIN_IDS = config.get("admin_ids")
ADMIN_ID = config.get("admin_id")
PHONE = config.get("phone")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        #logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
TZ = pytz.timezone("Europe/Moscow")
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

class IrCalendar:
    def __init__(self):
        self.caldav_url = CALDAV_URL
        self.username = USERNAME
        self.password = PASSWORD
        logger.info("IrCalendar initialized with CalDAV URL: %s", self.caldav_url)

    def parse_datetime(self, dt_obj):
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ timezone-aware."""
        logger.debug("Parsing datetime: %s", dt_obj)
        if isinstance(dt_obj, datetime):
            return dt_obj if dt_obj.tzinfo else TZ.localize(dt_obj)
        return None

    def get_busy_slots_sync(self, selected_date):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ CalDAV."""
        logger.info("Getting busy slots for date: %s", selected_date)
        try:
            client = caldav.DAVClient(url=self.caldav_url, username=self.username, password=self.password)
            my_principal = client.principal()
            calendars = my_principal.calendars()

            if not calendars:
                logger.warning("No calendars found.")
                return []

            for c in calendars:
                if c.name == CALENDAR_NAME:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'Work'
                    calendar = client.calendar(url=c.url)
                    events = calendar.date_search(selected_date)

                    busy_slots = []
                    for event in events:
                        gcal = Calendar.from_ical(event.data)
                        for component in gcal.walk():
                            if component.name == "VEVENT":
                                dtstart = self.parse_datetime(component.get('dtstart').dt)
                                dtend = self.parse_datetime(component.get('dtend').dt)
                                if dtstart and dtend:
                                    busy_slots.append((dtstart, dtend))
                    logger.info("Found busy slots: %s", busy_slots)
                    return busy_slots
        except Exception as e:
            logger.error("Error while getting calendar events: %s", e)
            return []

    async def get_busy_slots(self, selected_date):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥."""
        logger.debug("Asynchronously getting busy slots for date: %s", selected_date)
        loop = asyncio.get_event_loop()
        busy_slots = await loop.run_in_executor(None, self.get_busy_slots_sync, selected_date)
        return busy_slots

    async def find_free_slots_async(self, selected_date):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —à–∞–≥–æ–º 3 —á–∞—Å–∞."""
        logger.info("Finding free slots for date: %s", selected_date)
        work_start_dt = TZ.localize(datetime.combine(selected_date, time(10, 0)))
        work_end_dt = TZ.localize(datetime.combine(selected_date, time(22, 0)))

        busy_slots = await self.get_busy_slots(selected_date)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        free_slots = []

        current_start = work_start_dt
        while current_start < work_end_dt:
            current_end = current_start + timedelta(hours=3)
            is_busy = any(start < current_end and end > current_start for start, end in busy_slots)

            if not is_busy:
                free_slots.append(current_start)

            current_start = current_end

        logger.info("Found free slots: %s", free_slots)
        return free_slots

    async def update_calendar_status(self, year, month):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –ø–æ–º–µ—á–∞—è –¥–Ω–∏ –∫–∞–∫ ‚úÖ –∏–ª–∏ ‚õî."""
        logger.info("Updating calendar status for year: %d, month: %d", year, month)
        days_status = {}

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≤ –º–µ—Å—è—Ü–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        for day in range(1, 32):
            try:
                selected_date = datetime(year, month, day).date()
                free_slots = await self.find_free_slots_async(selected_date)

                if free_slots:
                    days_status[day] = "‚úÖ"  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
                else:
                    days_status[day] = "‚õî"  # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã

                logger.debug("Day %d status: %s", day, days_status[day])
            except ValueError:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Å–µ–Ω—Ç—è–±—Ä—è), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.warning("Invalid date: %d/%d/%d", day, month, year)
                continue

        logger.info("Updated calendar status: %s", days_status)
        return days_status


def generate_calendar(year, month, days_status, mode="auto"):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü, –∞–¥–∞–ø—Ç–∏—Ä—É—è –ø–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä.
    mode = "phone" ‚Üí 7 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ (–Ω–µ–¥–µ–ª—è).
    mode = "desktop" ‚Üí 10 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ.
    mode = "auto" ‚Üí –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
    """
    logger.debug("Generating calendar for year: %d, month: %d, mode: %s", year, month, mode)

    first_day = datetime(year, month, 1)
    last_day = (first_day + timedelta(days=32)).replace(day=1) - timedelta(days=1)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–ø–µ—Ä–≤—ã–π –¥–µ–Ω—å - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
    if mode == "auto":
        mode = "phone"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω

    max_buttons_per_row = 7 if mode == "phone" else 10  # 7 –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞, 10 –¥–ª—è –ü–ö

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    days_buttons = [[InlineKeyboardButton(day, callback_data="none") for day in week_days]]

    row = []
    start_weekday = first_day.weekday()  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–µ—Å—è—Ü

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º
    for _ in range(start_weekday):
        row.append(InlineKeyboardButton(" ", callback_data="none"))

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–Ω—è–º–∏ —Å –Ω–æ–≤—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    for day in range(1, last_day.day + 1):
        status = days_status.get(day, "‚ùì")

        # –ò–∑–º–µ–Ω—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–π
        if status == "‚úÖ":
            day_text = f"{day}"  # –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å
        elif status == "‚õî":
            day_text = f"‚ùå"  # –ó–∞–Ω—è—Ç—ã–π –¥–µ–Ω—å
        else:
            day_text = f"{day}"  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å

        row.append(InlineKeyboardButton(day_text, callback_data=f"day_{year}_{month}_{day}"))

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ 7 –∫–Ω–æ–ø–æ–∫ (–Ω–µ–¥–µ–ª—è)
        if len(row) == max_buttons_per_row:
            days_buttons.append(row)
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if row:
        while len(row) < max_buttons_per_row:
            row.append(InlineKeyboardButton(" ", callback_data="none"))
        days_buttons.append(row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–≤–ª–µ–≤–æ, –º–µ—Å—è—Ü, –≤–ø—Ä–∞–≤–æ)
    navigation_buttons = [
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_month_{year}_{month}"),
        InlineKeyboardButton(first_day.strftime("%B %Y"), callback_data="none"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_month_{year}_{month}")
    ]

    days_buttons.append(navigation_buttons)

    logger.debug("Generated calendar buttons: %s", days_buttons)
    return InlineKeyboardMarkup(days_buttons)


def get_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_open")],
        #[InlineKeyboardButton("üíµ –ü—Ä–∞–π—Å", callback_data="price_button")],
        [InlineKeyboardButton("üìÑ –ü—Ä–∞–π—Å", callback_data="price_html")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_button")]
    ]
    return InlineKeyboardMarkup(keyboard)

  
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
    user = update.message.from_user
    user_id = user.id
    user_name = user.full_name
    username = user.username if user.username else "–ù–µ—Ç"
    date_subscribed = datetime.now().strftime("%Y-%m-%d %H:%M")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if not any(sub["id"] == user_id for sub in subscribers):
        subscribers.append({
            "id": user_id,
            "name": user_name,
            "username": username,
            "date_subscribed": date_subscribed
        })
        save_users(subscribers)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_name} (@{username}, {user_id})")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    logger.info("Start command received.")
    cal = IrCalendar()
    now = datetime.now(TZ)

    days_status = {day: "‚ùì" for day in range(1, 32)}
    reply_markup = generate_calendar(now.year, now.month, days_status)

    combined_keyboard = get_main_menu().inline_keyboard + reply_markup.inline_keyboard
    full_reply_markup = InlineKeyboardMarkup(combined_keyboard)

    message = await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)

    asyncio.create_task(update_calendar_after_sync(message, now.year, now.month, cal))


async def subscribers_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribers: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    count = len(subscribers)
    message = f"üìä *–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}*\n\n"

    if count == 0:
        message += "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."
    else:
        for sub in subscribers:
            username_display = f"üîó @{sub['username']}" if sub['username'] else "üîó –ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
            message += (
                f"üë§ *{sub['name']}* (ID: `{sub['id']}`)\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è: {sub['date_subscribed']}\n"
                f"{username_display}\n"
                f"-----------------------------\n"
            )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_open")],
        [InlineKeyboardButton("üíµ –ü—Ä–∞–π—Å", callback_data="price_button")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_button")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)

async def update_calendar_after_sync(message, year, month, cal):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Yandex –ö–∞–ª–µ–Ω–¥–∞—Ä–µ–º."""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    days_status = await cal.update_calendar_status(year, month)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    reply_markup = generate_calendar(year, month, days_status)  # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    combined_keyboard = get_main_menu().inline_keyboard + reply_markup.inline_keyboard
    full_reply_markup = InlineKeyboardMarkup(combined_keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    await message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await loading_message.delete()
    
async def update_calendar_after_sync2(message, year, month, cal):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å –ö–∞–ª–µ–Ω–¥–∞—Ä–µ–º."""
    days_status = await cal.update_calendar_status(year, month)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    reply_markup = generate_calendar(year, month, days_status)  # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    combined_keyboard = get_main_menu().inline_keyboard + reply_markup.inline_keyboard
    full_reply_markup = InlineKeyboardMarkup(combined_keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –º–µ–Ω—é
    await message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)


async def change_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã –º–µ—Å—è—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    logger.info("Change month callback received.")
    query = update.callback_query
    await query.answer()

    try:
        parts = query.data.split("_")
        if len(parts) != 4:
            return

        direction, _, year, month = parts
        year, month = int(year), int(month)

        # –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
        if direction == "prev":
            month -= 1
            if month == 0:
                year -= 1
                month = 12
        elif direction == "next":
            month += 1
            if month == 13:
                year += 1
                month = 1

        cal = IrCalendar()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç IrCalendar

        # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ä–∞–∑—É —Å ‚ùì
        days_status = {day: "‚ùì" for day in range(1, 32)}
        reply_markup = generate_calendar(year, month, days_status)
        message = await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)

        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å –Ø–Ω–¥–µ–∫—Å –ö–∞–ª–µ–Ω–¥–∞—Ä—è **–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ**
        asyncio.create_task(update_calendar_after_sync(message, year, month, cal))

    except Exception as e:
        logger.error("Error while processing callback data: %s", e)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")

async def day_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    logger.info("Day selected callback received.")
    query = update.callback_query
    await query.answer()

    _, year, month, day = query.data.split("_")
    selected_date = datetime(int(year), int(month), int(day)).date()

    cal = IrCalendar()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç IrCalendar
    free_slots = await cal.find_free_slots_async(selected_date)

    if not free_slots:
        message = f"‚õî –ù–∞ {selected_date.strftime('%d %b')} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calendar_back_{year}_{month}")]]
    else:
        message = f"‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞ –Ω–∞ {selected_date.strftime('%d %b')}:\n"
        keyboard = []

        for slot in free_slots:
            slot_text = slot.strftime('%H:%M')
            message += f"üïí {slot_text}\n"
            keyboard.append([InlineKeyboardButton(f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è {slot_text}", callback_data=f"book_{year}_{month}_{day}_{slot_text}")])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calendar_back_{year}_{month}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)



async def calendar_open(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    logger.info("Calendar button pressed.")
    query = update.callback_query
    await query.answer()

    now = datetime.now(TZ)
    cal = IrCalendar()

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    days_status = {day: "‚ùì" for day in range(1, 32)}
    reply_markup = generate_calendar(now.year, now.month, days_status)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    combined_keyboard = get_main_menu().inline_keyboard + reply_markup.inline_keyboard
    full_reply_markup = InlineKeyboardMarkup(combined_keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if query.message.text:
            await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)
        else:
            await query.message.delete()
            await query.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ calendar_open: {e}")
        await query.message.delete()
        await query.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=full_reply_markup)

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    asyncio.create_task(update_calendar_after_sync(query.message, now.year, now.month, cal))


async def calendar_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é (–Ω–∞–∑–∞–¥)."""
    logger.info("Back to calendar callback received.")
    query = update.callback_query
    await query.answer()

    now = datetime.now(TZ)
    cal = IrCalendar()

    # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ä–∞–∑—É —Å ‚ùì
    days_status = {day: "‚ùì" for day in range(1, 32)}
    reply_markup = generate_calendar(now.year, now.month, days_status)
    message = await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)

    # 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å –Ø–Ω–¥–µ–∫—Å –ö–∞–ª–µ–Ω–¥–∞—Ä—è
    asyncio.create_task(update_calendar_after_sync(message, now.year, now.month, cal))


async def price_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–∞–π—Å."""
    logger.info("Price button pressed.")
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    try:
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    with open('price.jpg', 'rb') as photo:
        await query.message.reply_photo(photo, caption="üíµ –í–æ—Ç –Ω–∞—à –ø—Ä–∞–π—Å:", reply_markup=get_main_menu())


async def contacts_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã."""
    logger.info("Contacts button pressed.")
    query = update.callback_query
    await query.answer()

    phone_number = PHONE
    await query.message.reply_text(f"üìû –ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}", reply_markup=get_main_menu())

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
#ADMIN_IDS = [5328759519,173968578]  # –î–æ–±–∞–≤—å—Ç–µ ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

#ADMIN_ID = 5328759519  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as file:
        return json.load(file)

def save_users(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª."""
    with open(USERS_FILE, "w") as file:
        json.dump(users, file, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
subscribers = load_users()



async def book_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø–∏—Å—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç."""
    logger.info("Booking slot...")
    query = update.callback_query
    await query.answer()

    _, year, month, day, time = query.data.split("_")
    selected_date = f"{day}.{month}.{year} –≤ {time}"

    admin_id = "5328759519"
    message_admin = f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å: {selected_date}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await context.bot.send_message(chat_id=admin_id, text=message_admin)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {selected_date}!")


async def book_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    logger.info("Booking appointment request received.")
    query = update.callback_query
    await query.answer()

    _, year, month, day, slot = query.data.split("_")
    selected_date = datetime(int(year), int(month), int(day)).strftime('%d %b %Y')

    user = query.from_user
    user_name = user.full_name
    user_id = user.id

    booking_message = (
        f"üìÖ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* [{user_name}](tg://user?id={user_id})\n"
        f"üìÖ *–î–∞—Ç–∞:* {selected_date}\n"
        f"üïí *–í—Ä–µ–º—è:* {slot}\n"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(chat_id=ADMIN_ID, text=booking_message, parse_mode="Markdown")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ *{selected_date} –≤ {slot}* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", parse_mode="Markdown")

async def send_price_html(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ HTML-–ø—Ä–∞–π—Å –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ Telegram."""
    price_url = PRICE_URL  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à URL

    message_text = f"üí∞ *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç*\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∞–π—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ]({price_url})\n\n"

    keyboard = [
        [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∞–π—Å", url=price_url)],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_open"),
         InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_button")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(message_text, parse_mode="Markdown", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(message_text, parse_mode="Markdown", reply_markup=reply_markup)


async def send_price_html2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-—Ñ–∞–π–ª –ø—Ä–∞–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    logger.info("Sending price.html to user.")

    # **1. –°–æ–∑–¥–∞–µ–º HTML-—Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç**
    file_path = "price.html"
    if not os.path.exists(file_path):
        html_content = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@500&display=swap');
        body { font-family: 'Dancing Script', cursive; text-align: center; background-color: #f9f9f9; font-size: 18px; }
        h1 { color: #333; font-size: 28px; }
        h2 { color: #444; margin-top: 30px; font-size: 24px; }
        table { width: 80%; margin: 20px auto; border-collapse: collapse; background: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); border-radius: 8px; overflow: hidden; }
        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        th { background-color: #e91e63; color: white; font-size: 16px; }
        td { font-size: 18px; }
        .footer { margin-top: 30px; font-size: 20px; }
        .footer a { text-decoration: none; color: #e91e63; font-weight: bold; }
    </style>
</head>
<body>
    <h1>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç</h1>
    <p>–ê–∫—Ç—É–∞–ª—å–Ω–æ —Å 01.07.2024</p>
    <h2>–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü</h2>
    <table><tr><th>–£—Å–ª—É–≥–∞</th><th>–¶–µ–Ω–∞ (‚ÇΩ)</th></tr>
        <tr><td>–£–≥–æ–ª–∫–∏</td><td>2200</td></tr><tr><td>1D</td><td>2500</td></tr>
        <tr><td>1.5D</td><td>2700</td></tr><tr><td>2D</td><td>2800</td></tr>
        <tr><td>2.5D</td><td>3000</td></tr><tr><td>3D</td><td>3100</td></tr>
        <tr><td>4D</td><td>3400</td></tr><tr><td>–¶–≤–µ—Ç–Ω—ã–µ —Ä–µ—Å–Ω–∏—Ü—ã, –±–ª–µ—Å—Ç–∫–∏, –ª—É—á–∏–∫–∏</td><td>+300</td></tr>
    </table>
    <h2>–°–Ω—è—Ç–∏–µ</h2>
    <table><tr><th>–£—Å–ª—É–≥–∞</th><th>–¶–µ–Ω–∞ (‚ÇΩ)</th></tr>
        <tr><td>–ú–æ–µ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ–º</td><td>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</td></tr>
        <tr><td>–ú–æ–µ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è</td><td>300</td></tr>
        <tr><td>–†–∞–±–æ—Ç—ã –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞</td><td>300</td></tr>
    </table>
    <div class="footer"><a href="https://t.me/LashesButovo_bot">üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç–∞</a></div>
</body>
</html>"""
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(html_content)

    # **2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å**
    if update.message:
        # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /price_html
        chat_id = update.message.chat_id
        send_method = update.message.reply_document
    elif update.callback_query:
        # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        chat_id = update.callback_query.message.chat_id
        send_method = update.callback_query.message.reply_document
        await update.callback_query.answer()

    # **3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**
    with open(file_path, "rb") as file:
        await send_method(file, caption="üìÑ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç.", reply_markup=get_main_menu())

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("Bot started.")
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(change_month, pattern=r"^(prev|next)_month_"))
    application.add_handler(CallbackQueryHandler(day_selected, pattern=r"^day_\d+_\d+_\d+"))
    application.add_handler(CallbackQueryHandler(calendar_open, pattern="calendar_open"))
    #application.add_handler(CallbackQueryHandler(calendar_back, pattern="calendar_back"))
    application.add_handler(CallbackQueryHandler(calendar_back, pattern=r"^calendar_back_\d+_\d+$"))

    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(price_button, pattern="price_button"))
    application.add_handler(CallbackQueryHandler(contacts_button, pattern="contacts_button"))
    application.add_handler(CallbackQueryHandler(book_appointment, pattern=r"^book_\d+_\d+_\d+_\d+:\d+$"))
    application.add_handler(CallbackQueryHandler(book_slot, pattern=r"^book_\d+_\d+_\d+_\d+:\d+$"))
    application.add_handler(CommandHandler("subscribers", subscribers_count))
    application.add_handler(CommandHandler("price_html", send_price_html))
    application.add_handler(CallbackQueryHandler(send_price_html, pattern="price_html"))


    application.run_polling()


if __name__ == "__main__":
    main()