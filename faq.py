# faq.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
import logging

logger = logging.getLogger(__name__)

FAQ_TOPICS = [
    {
        "id": "care",
        "title": "–£—Ö–æ–¥ –ø–æ—Å–ª–µ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è",
        "text": (
            "\U0001FA74 *–£—Ö–æ–¥ –ø–æ—Å–ª–µ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è:*\n"
            "‚Ä¢ –ù–µ –º–æ—á–∏—Ç–µ —Ä–µ—Å–Ω–∏—Ü—ã –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞\n"
            "‚Ä¢ –ù–µ —Ç—Ä–∏—Ç–µ –≥–ª–∞–∑–∞ –∏ –Ω–µ —Å–ø–∏—Ç–µ –ª–∏—Ü–æ–º –≤ –ø–æ–¥—É—à–∫—É\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —â—ë—Ç–æ—á–∫—É –¥–ª—è —Ä–∞—Å—á—ë—Å—ã–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∂–∏—Ä–Ω–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ –º–∞—Å–ª–∞"
        )
    },
    {
        "id": "contra",
        "title": "–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è",
        "text": (
            "‚ö†Ô∏è *–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:*\n"
            "‚Ä¢ –ö–æ–Ω—ä—é–Ω–∫—Ç–∏–≤–∏—Ç, —è—á–º–µ–Ω—å, –∞–ª–ª–µ—Ä–≥–∏—è\n"
            "‚Ä¢ –ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (1 —Ç—Ä–∏–º–µ—Å—Ç—Ä) ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é\n"
            "‚Ä¢ –•–∏–º–∏–æ—Ç–µ—Ä–∞–ø–∏—è, –≥–ª–∞–∑–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –í—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª–∞–∑"
        )
    },
    {
        "id": "before",
        "title": "–ü–µ—Ä–µ–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π",
        "text": (
            "‚è∞ *–ü–µ—Ä–µ–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π:*\n"
            "‚Ä¢ –ù–µ –Ω–∞–Ω–æ—Å–∏—Ç–µ —Ç—É—à—å, —Ç–µ–Ω–∏, –∫—Ä–µ–º–∞ –∏ –ø—Ä–æ—á—É—é –∫–æ—Å–º–µ—Ç–∏–∫—É\n"
            "‚Ä¢ –ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –∫–æ—Ñ–µ, –∑–µ–ª–µ–Ω—ã–π —á–∞–π –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏"
        )
    },
]

def get_faq_handler():
    return CommandHandler("faq", faq)

def get_faq_callback_handler():
    return CallbackQueryHandler(handle_faq_response, pattern=r"^faq_(?!menu$)")

def get_faq_menu_handler():
    return CallbackQueryHandler(faq_menu, pattern="^faq_menu$")

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(text=topic["title"], callback_data=f"faq_{topic['id']}")]
        for topic in FAQ_TOPICS
    ]
    keyboard.append([
        InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="calendar_open"),
        InlineKeyboardButton("üìÑ –ü—Ä–∞–π—Å", callback_data="price_html"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_button")
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("üßë‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("üßë‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup, parse_mode="Markdown")

async def faq_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await faq(update, context)

async def handle_faq_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    topic_id = query.data.replace("faq_", "")
    topic = next((t for t in FAQ_TOPICS if t["id"] == topic_id), None)

    if topic:
        nav_buttons = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="calendar_open"),
                InlineKeyboardButton("üìÑ –ü—Ä–∞–π—Å", callback_data="price_html"),
                InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_button")
            ],
            [InlineKeyboardButton("üßë‚Äçüéì –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="faq_menu")]
        ])
        await query.edit_message_text(text=topic["text"], parse_mode="Markdown", reply_markup=nav_buttons)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)

